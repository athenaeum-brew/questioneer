{
  "id": "18",
  "description": "Overriding, Static",
  "questions": [
    {
      "question": "What is method overriding in Java?",
      "answers": [
        "Defining a method with the same name but different parameters in the same class",
        "Providing a new implementation of a method in a subclass",
        "Using the `static` keyword to modify a method in a subclass",
        "Calling a method from a superclass without modification"
      ],
      "correct": [1]
    },
    {
      "question": "Which annotation is used to ensure a method is overriding a superclass method?",
      "answers": ["@Override", "@Overridden", "@Inherited", "@Superclass"],
      "correct": [0]
    },
    {
      "question": "What happens if a method in the subclass does not match the signature of the overridden method?",
      "answers": [
        "It will throw a compile-time error",
        "The program will run with warnings",
        "The superclass method will be called by default",
        "It will create a new method unrelated to the superclass method"
      ],
      "correct": [3]
    },
    {
      "question": "Which access modifier can a subclass method have when overriding a `protected` superclass method?",
      "answers": ["private", "protected", "public", "default"],
      "correct": [1, 2]
    },
    {
      "question": "Can a static method be overridden in Java?",
      "answers": [
        "Yes, using the `@Override` annotation",
        "Yes, but only if it has the same return type",
        "No, static methods cannot be overridden",
        "No, static methods must be final"
      ],
      "correct": [2]
    },
    {
      "question": "What does the `static` keyword in Java signify?",
      "answers": [
        "A method or field belongs to an instance of the class",
        "A method or field belongs to the class itself",
        "A method or field is immutable",
        "A method or field cannot be overridden"
      ],
      "correct": [1]
    },
    {
      "question": "Which of the following are true about static fields?",
      "answers": [
        "They are shared among all instances of a class",
        "Each instance of a class gets its own copy",
        "They can be accessed without creating an instance",
        "They can be overridden"
      ],
      "correct": [0, 2]
    },
    {
      "question": "Which of these statements about static methods is correct?",
      "answers": [
        "Static methods cannot access instance variables",
        "Static methods can be abstract",
        "Static methods can use the `this` keyword",
        "Static methods can be called using the class name"
      ],
      "correct": [0, 3]
    },
    {
      "question": "Which of the following is a valid way to call a static method in Java?",
      "answers": [
        "By using an object instance",
        "By using the class name",
        "By using the keyword `static`",
        "None of these"
      ],
      "correct": [0, 1]
    },
    {
      "question": "Which of the following is true about static methods in Java?",
      "answers": [
        "Static methods can be called without creating an instance of the class",
        "Static methods can override instance methods in a superclass",
        "Static methods belong to the class rather than any specific instance",
        "Static methods can access other static members of the same class"
      ],
      "correct": [0, 2, 3]
    }
  ]
}
